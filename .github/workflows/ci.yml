name: CI

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint and type-check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: install/requirements-dev.txt
      - name: Install dev dependencies
        run: |
          python -m pip install -U pip wheel
          pip install -r install/requirements-dev.txt
      - name: Ruff + Black
        run: scripts/lint.sh
      - name: Type check (mypy)
        run: mypy src

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      - name: Run shellcheck
        run: |
          shellcheck install/*.sh scripts/*.sh install/inkypi || true

  tests:
    name: Tests (pytest)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11', '3.12', '3.13' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            install/requirements.txt
            install/requirements-dev.txt
      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libopenjp2-7 \
            libopenblas-dev \
            libfreetype6-dev \
            fonts-noto-color-emoji
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r install/requirements.txt -r install/requirements-dev.txt
          pip check
      - name: Run tests
        env:
          INKYPI_ENV: dev
          INKYPI_NO_REFRESH: '1'
          PYTHONPATH: src
        run: |
          pytest --cov=src --cov-report=xml -q
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: error

  smoke:
    name: Install smoke (container)
    needs: tests
    runs-on: ubuntu-latest
    container: debian:bookworm
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install OS dependencies
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            python3 python3-venv python3-pip git curl \
            libopenjp2-7 libopenblas-dev libfreetype6-dev \
            fonts-noto-color-emoji
      - name: Setup virtualenv
        run: |
          python3 -m venv .venv
          . .venv/bin/activate
          python -m pip install -U pip wheel
      - name: Install Python dependencies
        run: |
          . .venv/bin/activate
          pip install -r install/requirements.txt
          pip check || true
      - name: Import smoke
        run: |
          . .venv/bin/activate
          python - <<'PY'
          import flask, PIL, requests, urllib3, numpy, icalendar, psutil, waitress
          import pytz, feedparser
          print("Imports OK")
          PY
      - name: Boot web-only and probe routes
        env:
          INKYPI_ENV: dev
          INKYPI_NO_REFRESH: '1'
          PYTHONPATH: src
        run: |
          . .venv/bin/activate
          python src/inkypi.py --dev --web-only &
          SERVER_PID=$!

          # Wait for server to start and determine the correct URL
          SERVER_URL=""
          for i in $(seq 1 30); do
            # Try localhost first (most common case)
            if curl -fsS --max-time 2 http://127.0.0.1:8080/ >/dev/null 2>&1; then
              SERVER_URL="http://127.0.0.1:8080"
              break
            fi
            # Try common container IPs
            for ip in 172.18.0.2 172.17.0.2; do
              if curl -fsS --max-time 2 http://${ip}:8080/ >/dev/null 2>&1; then
                SERVER_URL="http://${ip}:8080"
                break 2
              fi
            done
            sleep 1
          done

          if [ -z "$SERVER_URL" ]; then
            echo "Server did not start within 30 seconds" >&2
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi

          echo "Using server URL: $SERVER_URL"

          # Test all routes
          curl -fsS ${SERVER_URL}/ >/dev/null
          curl -fsS ${SERVER_URL}/settings >/dev/null
          curl -fsS ${SERVER_URL}/playlist >/dev/null
          curl -sS -o /dev/null -w "%{http_code}\n" ${SERVER_URL}/preview | tee preview_code.txt
          curl -fsS ${SERVER_URL}/plugin/clock >/dev/null
          curl -fsS ${SERVER_URL}/images/clock/faces/digital.png >/dev/null
          curl -fsS "${SERVER_URL}/download-logs?hours=2" >/dev/null
          curl -fsS "${SERVER_URL}/api/logs?hours=2&limit=200" >/dev/null
          curl -fsS -X POST -d 'plugin_id=clock' ${SERVER_URL}/save_plugin_settings >/dev/null
          curl -fsS -X POST -d 'plugin_id=clock' ${SERVER_URL}/update_now >/dev/null
          if [ ! -f src/static/images/processed_image.png ] && [ ! -f mock_display_output/latest.png ]; then
            echo "Expected preview image not found" >&2
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          curl -fsS ${SERVER_URL}/preview >/dev/null

          # Cleanup
          kill $SERVER_PID 2>/dev/null || true


